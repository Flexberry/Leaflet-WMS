{
  "name": "Leaflet-WMS",
  "tagline": "",
  "body": "#Leaflet-WMS\r\n[![Travis master branch](https://img.shields.io/travis/Flexberry/Leaflet-WMS/master.svg?label=master%20build%20)](https://travis-ci.org/Flexberry/Leaflet-WMS)\r\n[![Travis develop branch](https://img.shields.io/travis/Flexberry/Leaflet-WMS/develop.svg?label=develop%20build)](https://travis-ci.org/Flexberry/Leaflet-WMS/branches)\r\n[![stability-stable](https://img.shields.io/badge/stability-stable-green.svg)](https://github.com/orangemug/stability-badges#stability-stable-green)\r\n\r\nOGC WMS client layer for [leaflet](http://leafletjs.com).\r\nAdds [GetFeatureInfo](http://docs.geoserver.org/latest/en/user/services/wms/reference.html#getfeatureinfo) requests support to leaflet's [L.TileLayer.WMS](http://leafletjs.com/reference-1.0.2.html#tilelayer-wms) layer.\r\nSupports parsing of [GetFeatureInfo](http://docs.geoserver.org/latest/en/user/services/wms/reference.html#getfeatureinfo) responses into [GeoJSON](http://geojson.org/geojson-spec.html) format from a variety of other formats.\r\n\r\n#Methods\r\n\r\n##getCapabilities\r\nPerforms [GetCapabilities](http://docs.geoserver.org/latest/en/user/services/wms/reference.html#getcapabilities) request to WMS-service on which instance of leaflet's [L.TileLayer.WMS](http://leafletjs.com/reference-1.0.2.html#tilelayer-wms) layer is configured.\r\nReturns [element](https://developer.mozilla.org/en-US/docs/Web/API/element) representing received XML-document describing WMS-service capabilities.\r\nReal request will be perfermed only at first time call, all subsequent calls will return the cached document [element](https://developer.mozilla.org/en-US/docs/Web/API/element).\r\n\r\n###Options\r\n|Option name|Is required|Default value|Description|\r\n|-----------|-----------|-------------|-----------|\r\n|done|false|-|Callback which will be called if request succeeds|\r\n|fail|false|```function(errorThrown) {throw errorThrown;}```|Callback which will be called if request will fail|\r\n|always|false|-|Callback which will be called regardless of whether request succeed or not|\r\n\r\n###Example\r\n```javascript\r\n// Create leaflet map.\r\nvar map = new L.Map('map').setView([-41.59490508367679, 146.77734375000003], 7);\r\n\r\n// Create & add OSM layer.\r\nvar osm = new L.TileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(map);\r\n\r\n// Create & add WMS-layer.\r\nvar tasmania = new L.TileLayer.WMS('http://demo.opengeo.org/geoserver/wms', {\r\n  layers: 'topp:tasmania',\r\n  format: 'image/png',\r\n  transparent: true,\r\n  version: '1.3.0',\r\n  crs: L.CRS.EPSG4326\r\n}).addTo(map);\r\n\r\n// Perform 'GetCapabilities' request.\r\ntasmania.getCapabilities({\r\n  done: function(capabilities) {\r\n  console.log('getCapabilitiessucceed: ', capabilities);\r\n  },\r\n  fail: function(errorThrown) {\r\n  console.log('getCapabilitiesfailed: ', errorThrown);\r\n  },\r\n  always: function() {\r\n  console.log('getCapabilitiesfinished');\r\n  }\r\n});\r\n```\r\n\r\n##getInfoFormat\r\nPerforms [GetCapabilities](http://docs.geoserver.org/latest/en/user/services/wms/reference.html#getcapabilities) request to WMS-service on which instance of leaflet's [L.TileLayer.WMS](http://leafletjs.com/reference-1.0.2.html#tilelayer-wms) layer is configured, analyzes formats supported by WMS-service for [GetFeatureInfo](http://docs.geoserver.org/latest/en/user/services/wms/reference.html#getfeatureinfo) requests, compares them with the formats implemented in the plugin, and finally returns string representing most preferred format for [GetFeatureInfo](http://docs.geoserver.org/latest/en/user/services/wms/reference.html#getfeatureinfo) requests.\r\nReal request will be perfermed only at first time call, all subsequent calls will return the cached string.\r\n\r\n###Options\r\n|Option name|Is required|Default value|Description|\r\n|-----------|-----------|-------------|-----------|\r\n|done|false|-|Callback which will be called if request succeeds|\r\n|fail|false|```function(errorThrown) {throw errorThrown;}```|Callback which will be called if request will fail|\r\n|always|false|-|Callback which will be called regardless of whether request succeed or not|\r\n\r\n###Example\r\n```javascript\r\n// Create leaflet map.\r\nvar map = new L.Map('map').setView([-41.59490508367679, 146.77734375000003], 7);\r\n\r\n// Create & add OSM layer.\r\nvar osm = new L.TileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(map);\r\n\r\n// Create & add WMS-layer.\r\nvar tasmania = new L.TileLayer.WMS('http://demo.opengeo.org/geoserver/wms', {\r\n  layers: 'topp:tasmania',\r\n  format: 'image/png',\r\n  transparent: true,\r\n  version: '1.3.0',\r\n  crs: L.CRS.EPSG4326\r\n}).addTo(map);\r\n\r\n// Request preferred info format.\r\ntasmania.getInfoFormat({\r\n  done: function(infoFormat) {\r\n  console.log('getInfoFormat succeed: ', infoFormat);\r\n  },\r\n  fail: function(errorThrown) {\r\n  console.log('getInfoFormat failed: ', errorThrown);\r\n  },\r\n  always: function() {\r\n  console.log('getInfoFormat finished');\r\n  }\r\n});\r\n```\r\n\r\n##getFeatureInfo\r\nPerforms [GetFeatureInfo](http://docs.geoserver.org/latest/en/user/services/wms/reference.html#getfeatureinfo) requests.\r\nReturns [GeoJSON FeatureCollection](http://geojson.org/geojson-spec.html#feature-collection-objects) representing received features info.\r\nIf preferred info format isn't defined in method options, call to getInfoFormat will be performed first.\r\n\r\n###Options\r\n|Option name|Is required|Default value|Description|\r\n|-----------|-----------|-------------|-----------|\r\n|latlng|true|-|Geographical point in which request must be performed. Must be instance of leaflet's [L.LatLng](http://leafletjs.com/reference#latlng)|\r\n|infoFormat|false|-|String representing preferred info format. If option won't be defined,  call to getInfoFormat will be performed first & returned string will be used as info format|\r\n|featureCount|false|1|Maximum number of features to return in response|\r\n|done|false|-|Callback which will be called if request succeeds|\r\n|fail|false|```function(errorThrown) {throw errorThrown;}```|Callback which will be called if request will fail|\r\n|always|false|-|Callback which will be called regardless of whether request succeed or not|\r\n\r\n###Supported formats\r\n|Format|Priority|Description|\r\n|------|--------|-----------|\r\n|applicaion/geojson|1|Some GIS servers can respond directly in [GeoJSON](http://geojson.org/geojson-spec.html) format, so this format has the highest priority|\r\n|'application/json'|2|Exists in GeoServer published WMS-services, also represents [GeoJSON](http://geojson.org/geojson-spec.html) format|\r\n|'application/vnd.ogc.gml'|3|Some GIS servers can respond in [GML](http://www.gdmc.nl/events/GISday2004/relay/data/02-069_OpenGIS_Geography_Markup_Language_GML_Implementation_Specification_version_2.1.2.pdf) format which can describe features geometries & their attributive information as [GeoJSON](http://geojson.org/geojson-spec.html) format, but in XML notation|\r\n|'application/vnd.ogc.gml/3.1.1'|4|Same as 'application/vnd.ogc.gml', but another version of the specification|\r\n|'application/vnd.ogc.wms_xml'|5|Represents features attributive information in XML notation, but without geometries|\r\n|'text/xml'|6|Same as 'application/vnd.ogc.wms_xml' but with another mime|\r\n|'text/html'|7|Represents features attributive information as HTML-table, but without geometries|\r\n\r\n###Example\r\n```javascript\r\n// Create leaflet map.\r\nvar map = new L.Map('map').setView([-41.59490508367679, 146.77734375000003], 7);\r\n\r\n// Create & add OSM layer.\r\nvar osm = new L.TileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(map);\r\n\r\n// Create & add WMS-layer.\r\nvar tasmania = new L.TileLayer.WMS('http://demo.opengeo.org/geoserver/wms', {\r\n  layers: 'topp:tasmania',\r\n  format: 'image/png',\r\n  transparent: true,\r\n  version: '1.3.0',\r\n  crs: L.CRS.EPSG4326\r\n}).addTo(map);\r\n\r\n// Perform 'GetFeatureInfo' request.\r\nmap.on('click', function(e) {\r\n  tasmania.getFeatureInfo({\r\n    latlng: e.latlng,\r\n    done: function(featureCollection) {\r\n    console.log('getFeatureInfosucceed: ', featureCollection);\r\n  },\r\n  fail: function(errorThrown) {\r\n    console.log('getFeatureInfo failed: ', errorThrown);\r\n  },\r\n  always: function() {\r\n      console.log('getFeatureInfo finished');\r\n  }\r\n  });\r\n});\r\n```\r\n\r\n#Demo examples\r\n* [Basic](http://flexberry.github.io/Leaflet-WMS/examples/basic.html)\r\n\r\n#License\r\n[MIT](https://github.com/Flexberry/Leaflet-WMS/blob/master/LICENSE.md)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}